"""
Based on an example of asymmetric encryption in Python
https://gist.github.com/syedrakib/241b68f5aeaefd7ef8e2
"""
from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64
import argparse

def generate_keys(modulus_length=None):
    # RSA modulus length must be a multiple of 256 and >= 1024
    if not modulus_length:
        modulus_length = int(input('Enter modulus length (big value, multiple of 256, preferably bigger than 1024): '))
    privatekey = RSA.generate(modulus_length, Random.new().read)
    publickey = privatekey.publickey()
    return privatekey, publickey


def encrypt(a_message , publickey):
    cipher = PKCS1_OAEP.new(publickey)
    encrypted_msg = cipher.encrypt(bytearray(a_message, encoding='utf-8'))
    encoded_encrypted_msg = base64.b64encode(encrypted_msg) # base64 encoded strings are database friendly
    return encoded_encrypted_msg


def decrypt(encoded_encrypted_msg, privatekey):
    cipher = PKCS1_OAEP.new(privatekey)
    decoded_encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    decoded_decrypted_msg = privatekey.decrypt(decoded_encrypted_msg)
    return decoded_decrypted_msg


def main(enc=None, filename=None):
    parser = argparse.ArgumentParser()

    # filename
    parser.add_argument('-file', help='Filename')
    # encryption (set to 1 for enc, 0 for dec)
    parser.add_argument('-enc', help='Encrypt/Decrypt - Set to 1 for Encryption, 0 for Decryption')

    args = parser.parse_args()

    if not (enc and args.enc):
        enc = input('Enter 1 for encryption, 0 for decryption: ')

    if not (filename and args.file):
        filename = input('Enter filename for {0}: '.format('encryption' if enc else 'decryption'))

    privatekey, publickey = generate_keys()
    encrypted_msg = encrypt(a_message, publickey)
    decrypted_msg = decrypt(encrypted_msg, privatekey)

    print("%s - (%d)\n" % (privatekey.exportKey() , len(privatekey.exportKey())))
    print("%s - (%d)\n" % (publickey.exportKey() , len(publickey.exportKey())))
    print("Original content: %s - (%d)" % (a_message, len(a_message)))
    print("Encrypted message: %s - (%d)" % (encrypted_msg, len(encrypted_msg)))
    print("Decrypted message: %s - (%d)" % (decrypted_msg, len(decrypted_msg)))
