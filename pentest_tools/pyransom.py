"""
Based on an example of asymmetric encryption in Python
https://gist.github.com/syedrakib/241b68f5aeaefd7ef8e2
"""
from Crypto.Cipher import PKCS1_OAEP
import base64
import argparse
import sys


def encrypt(a_message , publickey):
    cipher = PKCS1_OAEP.new(publickey)
    encrypted_msg = cipher.encrypt(a_message)
    encoded_encrypted_msg = base64.b64encode(encrypted_msg) # base64 encoded strings are database friendly
    return encoded_encrypted_msg


def decrypt(encoded_encrypted_msg, privatekey):
    cipher = PKCS1_OAEP.new(privatekey)
    decoded_encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    decoded_decrypted_msg = cipher.decrypt(decoded_encrypted_msg)
    return decoded_decrypted_msg


def main(enc=None, filename=None):
    parser = argparse.ArgumentParser()

    # filename
    parser.add_argument('-file', help='Filename')
    # encryption (set to 1 for enc, 0 for dec)
    parser.add_argument('-enc', help='Encrypt/Decrypt - Set to 1 for Encryption, 0 for Decryption')

    args = parser.parse_args()

    if not (enc and args.enc):
        enc = input('Enter 1 for encryption, 0 for decryption: ')

    if not (filename and args.file):
        filename = input('Enter filename for {0}: '.format('encryption' if enc else 'decryption'))

    in_file = open(filename, 'rb').read()
    # TODO: after reading, delete the file so that it can be replaced by our encrypted equivalent

    # TODO: separate enc/dec cases, read keys from files, create configuration file for static params (filenames)

    encrypted_file = encrypt(in_file, publickey)

    with open(filename.replace('.', '_') + '_encrypted', 'wb') as out_file:
        out_file.write(encrypted_file)

    decrypted_file = decrypt(encrypted_file, privatekey)

    # print("%s - (%d)\n" % (privatekey.exportKey() , len(privatekey.exportKey())))
    # print("%s - (%d)\n" % (publickey.exportKey() , len(publickey.exportKey())))
    # print("Original content: %s - (%d)" % (in_file, len(in_file)))
    # print("Encrypted message: %s - (%d)" % (encrypted_msg, len(encrypted_msg)))
    # print("Decrypted message: %s - (%d)" % (decrypted_msg, len(decrypted_msg)))


if __name__=="__main__":
    main(sys.argv)