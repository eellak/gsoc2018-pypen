"""
Example of asymmetric encryption in Python
https://gist.github.com/syedrakib/241b68f5aeaefd7ef8e2
"""
from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64

def generate_keys(modulus_length=None):
    # RSA modulus length must be a multiple of 256 and >= 1024
    if not modulus_length:
        modulus_length = int(input('Enter modulus length (big value, multiple of 256, preferably bigger than 1024): '))
    privatekey = RSA.generate(modulus_length, Random.new().read)
    publickey = privatekey.publickey()
    cipher_enc = PKCS1_OAEP.new(publickey)
    cipher_dec = PKCS1_OAEP.new(privatekey)
    return privatekey, publickey, cipher_enc, cipher_dec


def encrypt_message(a_message , cipher):
    encrypted_msg = cipher.encrypt(bytearray(a_message, encoding='utf-8'))
    encoded_encrypted_msg = base64.b64encode(encrypted_msg) # base64 encoded strings are database friendly
    return encoded_encrypted_msg


def decrypt_message(encoded_encrypted_msg, cipher_dec):
    decoded_encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    decoded_decrypted_msg = cipher_dec.decrypt(decoded_encrypted_msg)
    return decoded_decrypted_msg

########## BEGIN ##########

a_message = "The quick brown fox jumped over the lazy dog"
privatekey , publickey, cipher_enc, cipher_dec = generate_keys()
encrypted_msg = encrypt_message(a_message, cipher_enc)
decrypted_msg = decrypt_message(encrypted_msg, cipher_dec)

# print("%s - (%d)" % (privatekey.exportKey() , len(privatekey.exportKey())))
# print("%s - (%d)" % (publickey.exportKey() , len(publickey.exportKey())))
print("Original content: %s - (%d)" % (a_message, len(a_message)))
print("Encrypted message: %s - (%d)" % (encrypted_msg, len(encrypted_msg)))
print("Decrypted message: %s - (%d)" % (decrypted_msg, len(decrypted_msg)))
